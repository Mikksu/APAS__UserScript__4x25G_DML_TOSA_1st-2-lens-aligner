//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserScript.CamRAC {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CamRAC.ICamRemoteAccessContract")]
    public interface ICamRemoteAccessContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICamRemoteAccessContract/GrabOneFrame", ReplyAction="http://tempuri.org/ICamRemoteAccessContract/GrabOneFrameResponse")]
        System.Drawing.Bitmap GrabOneFrame(string Caption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICamRemoteAccessContract/GrabOneFrame", ReplyAction="http://tempuri.org/ICamRemoteAccessContract/GrabOneFrameResponse")]
        System.Threading.Tasks.Task<System.Drawing.Bitmap> GrabOneFrameAsync(string Caption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICamRemoteAccessContract/SetExposure", ReplyAction="http://tempuri.org/ICamRemoteAccessContract/SetExposureResponse")]
        void SetExposure(string Caption, double Exp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICamRemoteAccessContract/SetExposure", ReplyAction="http://tempuri.org/ICamRemoteAccessContract/SetExposureResponse")]
        System.Threading.Tasks.Task SetExposureAsync(string Caption, double Exp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICamRemoteAccessContract/GetExposure", ReplyAction="http://tempuri.org/ICamRemoteAccessContract/GetExposureResponse")]
        double GetExposure(string Caption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICamRemoteAccessContract/GetExposure", ReplyAction="http://tempuri.org/ICamRemoteAccessContract/GetExposureResponse")]
        System.Threading.Tasks.Task<double> GetExposureAsync(string Caption);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICamRemoteAccessContractChannel : UserScript.CamRAC.ICamRemoteAccessContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CamRemoteAccessContractClient : System.ServiceModel.ClientBase<UserScript.CamRAC.ICamRemoteAccessContract>, UserScript.CamRAC.ICamRemoteAccessContract {
        
        public CamRemoteAccessContractClient() {
        }
        
        public CamRemoteAccessContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CamRemoteAccessContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CamRemoteAccessContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CamRemoteAccessContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Drawing.Bitmap GrabOneFrame(string Caption) {
            return base.Channel.GrabOneFrame(Caption);
        }
        
        public System.Threading.Tasks.Task<System.Drawing.Bitmap> GrabOneFrameAsync(string Caption) {
            return base.Channel.GrabOneFrameAsync(Caption);
        }
        
        public void SetExposure(string Caption, double Exp) {
            base.Channel.SetExposure(Caption, Exp);
        }
        
        public System.Threading.Tasks.Task SetExposureAsync(string Caption, double Exp) {
            return base.Channel.SetExposureAsync(Caption, Exp);
        }
        
        public double GetExposure(string Caption) {
            return base.Channel.GetExposure(Caption);
        }
        
        public System.Threading.Tasks.Task<double> GetExposureAsync(string Caption) {
            return base.Channel.GetExposureAsync(Caption);
        }
    }
}
